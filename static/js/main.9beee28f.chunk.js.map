{"version":3,"sources":["CalculatorService.js","Calculator.js","index.js"],"names":["calculate","input","trim","validateFormat","startsWith","evaluate","replace","textExp","indexOf","calculateSimpleExpression","firstCloseExp","priorOpenExp","substring","lastIndexOf","innerExp","result","successFlag","targetStr","regex","RegExp","value","testString","test","simpleExp","search","num1","num2","op","begin","end","i","length","charAt","j","Number","k","replaceString","replaceValue","operator","val1","val2","performOperation","Calculator","props","event","preventDefault","state","mathStr","setState","errorMessage","message","handleInputChange","target","bind","ErrorPanel","this","id","className","onChange","rows","cols","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAKO,SAASA,EAAUC,GACtB,IAAKA,IAAUA,EAAMC,OACjB,MAAO,CAAC,aAAgB,EAAO,QAAW,uCAG9C,OAAKC,EADmB,sBACeF,KAGnCA,EAAMG,WAAW,MAAOH,EAAMG,WAAW,QACzCH,EAAQ,IAAIA,GAETI,EAASJ,EAAMK,QAAQ,MAAO,MAL1B,CAAC,aAAgB,EAAO,QAAW,4CAclD,SAASD,EAAUE,GAEf,IAAuB,IADHA,EAAQC,QAAQ,KACV,CAEtB,OAAKL,EADe,8EACgBI,GAI7BE,EAA0BF,GAHtB,CAAC,aAAgB,EAAO,QAAW,iBAK9C,IAAIG,EAAgBH,EAAQC,QAAQ,KACpC,IAAuB,IAAnBE,EACA,MAAO,CAAC,aAAgB,EAAO,QAAW,iBAE9C,IAAIC,EAAeJ,EAAQK,UAAU,EAAGF,GAAeG,YAAY,KAC/DC,EAAWP,EAAQK,UAAUD,EAAa,EAAGD,GAC7CK,EAASV,EAASS,GACtB,GAAIC,EAAOC,YAAa,CACpB,IAAMC,GAAa,IAAIH,EAAS,KAAKR,QAAQ,aAAc,QACrDY,EAAQ,IAAIC,OAAOF,EAAW,KAEpC,OAAOZ,EADPE,EAAUA,EAAQD,QAAQY,EAAOH,EAAOK,QAGxC,OAAOL,EAWnB,SAASZ,EAAgBe,EAAOG,GAC5B,OAAOH,EAAMI,KAAKD,GAQtB,SAASZ,EAA2Bc,GAChC,IAAkD,IAA9CA,EAAUX,UAAU,GAAGY,OAAO,WAC9B,MAAO,CAAC,aAAgB,EAAM,MAASD,GAE3C,IAGIE,EACAC,EAJAC,GAAM,EACNC,EAAQ,EACRC,GAAO,EAIX,IAAY,IADHN,EAAUC,OAAO,UAEtB,IAAK,IAAIM,EAAE,EAAGA,EAAGP,EAAUQ,OAAOD,IAC9B,GAA4B,MAAxBP,EAAUS,OAAOF,IAAsC,MAAxBP,EAAUS,OAAOF,GAAY,CAC5DH,EAAKG,EACL,YAKR,IAAK,IAAIG,GADTN,EAAKJ,EAAUC,OAAO,UACR,EAAGS,GAAI,EAAEA,IACnB,GAA4B,MAAxBV,EAAUS,OAAOC,IAAsC,MAAxBV,EAAUS,OAAOC,GAAY,CAExDL,EADM,IAANK,GAAsC,MAA1BV,EAAUS,OAAOC,EAAE,IAAwC,MAA1BV,EAAUS,OAAOC,EAAE,GACxDA,EAEAA,EAAE,EAElB,MAIRR,EAAOS,OAAOX,EAAUX,UAAUgB,EAAOD,IACzC,IAAK,IAAIQ,EAAER,EAAG,EAAGQ,EAAIZ,EAAUQ,OAAQI,IACnC,GAA4B,MAAxBZ,EAAUS,OAAOG,IAAsC,MAAxBZ,EAAUS,OAAOG,IAAsC,MAAxBZ,EAAUS,OAAOG,IACpD,MAAxBZ,EAAUS,OAAOG,IAAsC,MAAxBZ,EAAUS,OAAOG,GAAY,CAC/DN,EAAMM,EACN,OAGK,IAATN,IACAA,EAAMN,EAAUQ,QAEpBL,EAAOQ,OAAOX,EAAUX,UAAUe,EAAG,EAAGE,IACxC,IAAIO,EAAgBb,EAAUX,UAAUgB,EAAMC,GAC1CQ,EAYR,SAA2BC,EAAUC,EAAMC,GACvC,GAAiB,MAAbF,EACA,OAAOC,EAAOC,EACX,GAAiB,MAAbF,EACP,OAAOC,EAAOC,EACX,GAAiB,MAAbF,EACP,OAAOC,EAAOC,EACX,GAAiB,MAAbF,EACP,OAAOC,EAAOC,EACX,GAAiB,MAAbF,EACP,OAAOC,EAAOC,EAtBCC,CAAiBlB,EAAUX,UAAUe,EAAIA,EAAG,GAAIF,EAAMC,GAEzE,OAAOjB,EADPc,EAAYA,EAAUjB,QAAQ8B,EAAeC,I,WC/BlCK,E,kDA5EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAcV3C,UAAY,SAAC4C,GACTA,EAAMC,iBACN,IAAI9B,EAASf,EAAU,EAAK8C,MAAMC,SAC9BhC,EAAOC,YACP,EAAKgC,SAAS,CACVjC,OAAS,YAAcA,EAAOK,MAC9B6B,aAAe,KAGnB,EAAKD,SAAS,CACVjC,OAAS,GACTkC,aAAelC,EAAOmC,WA1Bf,EAmCnBC,kBAAoB,SAACP,GACjB,EAAKI,SAAS,CACVD,QAAUH,EAAMQ,OAAOhC,MACvBL,OAAS,MApCb,EAAK+B,MAAQ,CACTC,QAAU,GACVhC,OAAS,GACTkC,aAAe,IAEnB,EAAKjD,UAAY,EAAKA,UAAUqD,KAAf,gBACjB,EAAKF,kBAAoB,EAAKA,kBAAkBE,KAAvB,gBARV,E,0CA0CnB,WACI,IAAIC,EAAa,KAUjB,OATIC,KAAKT,MAAMG,eACXK,EACI,qBAAKE,GAAG,gBAAR,SACI,6BACI,+BAAKD,KAAKT,MAAMG,aAAhB,6BAMZ,qBAAKQ,UAAU,UAAf,SACI,uBAAMD,GAAG,iBAAT,UACI,iCACI,oBAAIA,GAAG,YAAP,4CAEJ,gCACI,mBAAGC,UAAU,kBAAb,wNACCH,EACD,sBAAKG,UAAU,WAAf,UACI,uBAAOD,GAAG,eAAV,qCACA,0BAAUA,GAAG,eAAeE,SAAUH,KAAKJ,kBAAmB/B,MAAOmC,KAAKT,MAAMC,QAASY,KAAK,IAAIC,KAAK,UAE3G,wBAAQJ,GAAG,gBAAgBK,QAASN,KAAKvD,UAAzC,uBACA,8BACI,mBAAGwD,GAAG,aAAN,SAAoBD,KAAKT,MAAM/B,uB,GArElC+C,aCAzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9beee28f.chunk.js","sourcesContent":["/**\n * Calculates the Mathematical expression as String\n * @param {String} input math expression in String format\n * @returns result if the syntax is correct, error message in case of an error.\n */\nexport function calculate(input) {\n    if (!input || !input.trim()) {\n        return {'successFlag' : false, 'message': 'No Math string found in input area.'}\n    }\n    var allowedCharacters = /^[\\d+*\\-%/().\\s]+$/g\n    if (!validateFormat(allowedCharacters, input)) {\n        return {'successFlag' : false, 'message': 'Invalid Input entered in the text field.'}\n    }\n    if (input.startsWith('+') ||input.startsWith('-')) {\n        input = '0'+input\n    }\n    return evaluate(input.replace(/\\s/g, ''))\n}\n\n/**\n * Evaluates the mathematical expression by calculating the \n * inner expressions in parenthesis one at a time\n * @param {String} textExp Test Expression\n * @returns result if the syntax is correct, error message in case of an error.\n */\nfunction evaluate (textExp) {\n    var innerExpCheck = textExp.indexOf('(')\n    if (innerExpCheck === -1) {\n       var acceptedFormat = /^[+-]?((\\.\\d+)|\\d+(\\.\\d+)?)\\s?([+*%\\-/]\\s?[+-]?((\\.\\d+)|\\d+(\\.\\d+)?)\\s?)*$/g\n        if (!validateFormat(acceptedFormat, textExp)) {\n            return {'successFlag' : false, 'message': 'Syntax Error.'}\n        }\n        //To-Do implementation\n        return calculateSimpleExpression(textExp)\n    } else {\n        var firstCloseExp = textExp.indexOf(')')\n        if (firstCloseExp === -1) {\n            return {'successFlag' : false, 'message': 'Syntax Error.'}\n        }\n        var priorOpenExp = textExp.substring(0, firstCloseExp).lastIndexOf('(')\n        var innerExp = textExp.substring(priorOpenExp+1, firstCloseExp)\n        var result = evaluate(innerExp);\n        if (result.successFlag) {\n            const targetStr = ('('+innerExp+')').replace(/[-/*+.()]/g, '\\\\$&')\n            const regex = new RegExp(targetStr, 'g')\n            textExp = textExp.replace(regex, result.value)\n            return evaluate(textExp)\n        } else {\n            return result;\n        }\n    }\n}\n\n/**\n * Validates Format of the string\n * @param {String} regex Regular expression to be matched against\n * @param {String} testString String to be tested\n * @returns True if test string matched with the regular expression, otherwise false\n */\nfunction validateFormat (regex, testString) {\n    return regex.test(testString);\n}\n\n/**\n * Calculates the result of a mathematical expression without parenthesis\n * @param {String} simpleExp Simple mathematic expression with +, -, *, %, /\n * @returns calculated result\n */\nfunction calculateSimpleExpression (simpleExp) {\n    if (simpleExp.substring(1).search(/[*/%+-]/) === -1) {\n        return {'successFlag' : true, 'value': simpleExp}\n    }\n    var op = -1\n    var begin = 0\n    var end = -1\n    var num1 = 0\n    var num2 = 0\n    var p1 = simpleExp.search(/[*/%]/)\n    if (p1 === -1) {\n        for (var i=1; i <simpleExp.length;i++) {\n            if (simpleExp.charAt(i) === '+' || simpleExp.charAt(i) === '-') {\n                op = i;\n                break;\n            }\n        }\n    } else {\n        op = simpleExp.search(/[*/%]/)\n        for (var j=op-1; j >=0;j--) {\n            if (simpleExp.charAt(j) === '+' || simpleExp.charAt(j) === '-') {\n                if (j === 0 || (simpleExp.charAt(j-1) === '+' || simpleExp.charAt(j-1) === '-')) {\n                    begin = j\n                } else {\n                    begin = j+1\n                }\n            break;\n            }\n        }\n    }\n    num1 = Number(simpleExp.substring(begin, op))\n    for (var k=op+2; k < simpleExp.length; k++) {\n        if (simpleExp.charAt(k) === '+' || simpleExp.charAt(k) === '-' || simpleExp.charAt(k) === '*'\n            || simpleExp.charAt(k) === '%' || simpleExp.charAt(k) === '/') {\n            end = k;\n            break;\n        }\n    }\n    if (end === -1) {\n        end = simpleExp.length\n    }\n    num2 = Number(simpleExp.substring(op+1, end))\n    var replaceString = simpleExp.substring(begin,end)\n    var replaceValue = performOperation(simpleExp.substring(op, op+1), num1, num2)\n    simpleExp = simpleExp.replace(replaceString, replaceValue)\n    return calculateSimpleExpression(simpleExp)\n}\n\n/**\n * Performs Basic Arithmetic Operations\n * @param {String} operator (+, -, *, %, /) the operation needs to performed\n * @param {Number} val1 Value 1\n * @param {Number} val2 Value 2\n * @returns result based on the operator choosen\n */\nfunction performOperation (operator, val1, val2) {\n    if (operator === '+') {\n        return val1 + val2\n    } else if (operator === '-') {\n        return val1 - val2\n    } else if (operator === '*') {\n        return val1 * val2\n    } else if (operator === '%') {\n        return val1 % val2\n    } else if (operator === '/') {\n        return val1 / val2\n    }\n}","import React, {Component} from 'react';\nimport './Calculator.css';\nimport {calculate} from './CalculatorService';\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mathStr : '',\n            result : '',\n            errorMessage : ''\n        };\n        this.calculate = this.calculate.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n    \n    /**\n     * A button click event, which calculates the mathematical expression\n     * @param {*} event event\n     */\n    calculate = (event) => {\n        event.preventDefault();\n        var result = calculate(this.state.mathStr);\n        if (result.successFlag) {\n            this.setState({\n                result : 'Result : ' + result.value,\n                errorMessage : ''\n            })\n        } else {\n            this.setState({\n                result : '',\n                errorMessage : result.message\n            })\n        }\n    }\n    \n    /**\n     * Handles Input change event\n     * @param {*} event \n     */\n    handleInputChange = (event) => {\n        this.setState({\n            mathStr : event.target.value,\n            result : ''\n        })\n    }\n    \n    render() {\n        let ErrorPanel = null;\n        if (this.state.errorMessage) {\n            ErrorPanel = (\n                <div id=\"errorPanelDiv\">\n                    <ul>\n                        <li>{this.state.errorMessage} Please Try again.</li>\n                    </ul>\n                </div>\n            );\n        }\n        return (\n            <div className=\"maindiv\">\n                <form id=\"calculatorForm\">\n                    <header>\n                        <h1 id=\"calcTitle\">Calculator - VidMob Exercise</h1>\n                    </header>\n                    <div>\n                        <p className=\"calcDesrciption\">Enter a valid math problem and click on Calculate button to see the result. Currently '+', '-', '*', '/', '%' operations including parentheses are supported. For example: \"1 + 2\", \"(4-2)*3.52\" etc. </p>\n                        {ErrorPanel}\n                        <div className=\"innerDiv\">\n                            <label id=\"mathStrLabel\">Enter a Math Problem : </label>\n                            <textarea id=\"mathStrInput\" onChange={this.handleInputChange} value={this.state.mathStr} rows=\"5\" cols=\"45\"/>\n                        </div>\n                        <button id=\"mathStrButton\" onClick={this.calculate}>Calculate</button>\n                        <div>\n                            <p id=\"resultElem\">{this.state.result}</p>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\nexport default Calculator;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './Calculator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}